/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Enrollment as PrismaEnrollment } from "@prisma/client";

export class EnrollmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EnrollmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.enrollment.count(args);
  }

  async enrollments<T extends Prisma.EnrollmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnrollmentFindManyArgs>
  ): Promise<PrismaEnrollment[]> {
    return this.prisma.enrollment.findMany<Prisma.EnrollmentFindManyArgs>(args);
  }
  async enrollment<T extends Prisma.EnrollmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnrollmentFindUniqueArgs>
  ): Promise<PrismaEnrollment | null> {
    return this.prisma.enrollment.findUnique(args);
  }
  async createEnrollment<T extends Prisma.EnrollmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnrollmentCreateArgs>
  ): Promise<PrismaEnrollment> {
    return this.prisma.enrollment.create<T>(args);
  }
  async updateEnrollment<T extends Prisma.EnrollmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnrollmentUpdateArgs>
  ): Promise<PrismaEnrollment> {
    return this.prisma.enrollment.update<T>(args);
  }
  async deleteEnrollment<T extends Prisma.EnrollmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EnrollmentDeleteArgs>
  ): Promise<PrismaEnrollment> {
    return this.prisma.enrollment.delete(args);
  }
}
