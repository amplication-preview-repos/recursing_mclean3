/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NonAvailability } from "./NonAvailability";
import { NonAvailabilityCountArgs } from "./NonAvailabilityCountArgs";
import { NonAvailabilityFindManyArgs } from "./NonAvailabilityFindManyArgs";
import { NonAvailabilityFindUniqueArgs } from "./NonAvailabilityFindUniqueArgs";
import { CreateNonAvailabilityArgs } from "./CreateNonAvailabilityArgs";
import { UpdateNonAvailabilityArgs } from "./UpdateNonAvailabilityArgs";
import { DeleteNonAvailabilityArgs } from "./DeleteNonAvailabilityArgs";
import { Tutor } from "../../tutor/base/Tutor";
import { NonAvailabilityService } from "../nonAvailability.service";
@graphql.Resolver(() => NonAvailability)
export class NonAvailabilityResolverBase {
  constructor(protected readonly service: NonAvailabilityService) {}

  async _nonAvailabilitiesMeta(
    @graphql.Args() args: NonAvailabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NonAvailability])
  async nonAvailabilities(
    @graphql.Args() args: NonAvailabilityFindManyArgs
  ): Promise<NonAvailability[]> {
    return this.service.nonAvailabilities(args);
  }

  @graphql.Query(() => NonAvailability, { nullable: true })
  async nonAvailability(
    @graphql.Args() args: NonAvailabilityFindUniqueArgs
  ): Promise<NonAvailability | null> {
    const result = await this.service.nonAvailability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NonAvailability)
  async createNonAvailability(
    @graphql.Args() args: CreateNonAvailabilityArgs
  ): Promise<NonAvailability> {
    return await this.service.createNonAvailability({
      ...args,
      data: {
        ...args.data,

        tutor: args.data.tutor
          ? {
              connect: args.data.tutor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NonAvailability)
  async updateNonAvailability(
    @graphql.Args() args: UpdateNonAvailabilityArgs
  ): Promise<NonAvailability | null> {
    try {
      return await this.service.updateNonAvailability({
        ...args,
        data: {
          ...args.data,

          tutor: args.data.tutor
            ? {
                connect: args.data.tutor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NonAvailability)
  async deleteNonAvailability(
    @graphql.Args() args: DeleteNonAvailabilityArgs
  ): Promise<NonAvailability | null> {
    try {
      return await this.service.deleteNonAvailability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Tutor, {
    nullable: true,
    name: "tutor",
  })
  async getTutor(
    @graphql.Parent() parent: NonAvailability
  ): Promise<Tutor | null> {
    const result = await this.service.getTutor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
