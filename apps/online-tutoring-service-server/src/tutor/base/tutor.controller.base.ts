/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TutorService } from "../tutor.service";
import { TutorCreateInput } from "./TutorCreateInput";
import { Tutor } from "./Tutor";
import { TutorFindManyArgs } from "./TutorFindManyArgs";
import { TutorWhereUniqueInput } from "./TutorWhereUniqueInput";
import { TutorUpdateInput } from "./TutorUpdateInput";
import { AvailabilityFindManyArgs } from "../../availability/base/AvailabilityFindManyArgs";
import { Availability } from "../../availability/base/Availability";
import { AvailabilityWhereUniqueInput } from "../../availability/base/AvailabilityWhereUniqueInput";
import { LessonFindManyArgs } from "../../lesson/base/LessonFindManyArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { LessonWhereUniqueInput } from "../../lesson/base/LessonWhereUniqueInput";
import { NonAvailabilityFindManyArgs } from "../../nonAvailability/base/NonAvailabilityFindManyArgs";
import { NonAvailability } from "../../nonAvailability/base/NonAvailability";
import { NonAvailabilityWhereUniqueInput } from "../../nonAvailability/base/NonAvailabilityWhereUniqueInput";

export class TutorControllerBase {
  constructor(protected readonly service: TutorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tutor })
  async createTutor(@common.Body() data: TutorCreateInput): Promise<Tutor> {
    return await this.service.createTutor({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Tutor] })
  @ApiNestedQuery(TutorFindManyArgs)
  async tutors(@common.Req() request: Request): Promise<Tutor[]> {
    const args = plainToClass(TutorFindManyArgs, request.query);
    return this.service.tutors({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tutor(
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Tutor | null> {
    const result = await this.service.tutor({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTutor(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() data: TutorUpdateInput
  ): Promise<Tutor | null> {
    try {
      return await this.service.updateTutor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tutor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTutor(
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Tutor | null> {
    try {
      return await this.service.deleteTutor({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/availabilities")
  @ApiNestedQuery(AvailabilityFindManyArgs)
  async findAvailabilities(
    @common.Req() request: Request,
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Availability[]> {
    const query = plainToClass(AvailabilityFindManyArgs, request.query);
    const results = await this.service.findAvailabilities(params.id, {
      ...query,
      select: {
        createdAt: true,
        dayOfWeek: true,
        endTime: true,
        id: true,
        startTime: true,

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availabilities")
  async connectAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        connect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availabilities")
  async updateAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        set: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availabilities")
  async disconnectAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availabilities: {
        disconnect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/lessons")
  @ApiNestedQuery(LessonFindManyArgs)
  async findLessons(
    @common.Req() request: Request,
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<Lesson[]> {
    const query = plainToClass(LessonFindManyArgs, request.query);
    const results = await this.service.findLessons(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,

        student: {
          select: {
            id: true,
          },
        },

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lessons")
  async connectLessons(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        connect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lessons")
  async updateLessons(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        set: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lessons")
  async disconnectLessons(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        disconnect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/nonAvailabilities")
  @ApiNestedQuery(NonAvailabilityFindManyArgs)
  async findNonAvailabilities(
    @common.Req() request: Request,
    @common.Param() params: TutorWhereUniqueInput
  ): Promise<NonAvailability[]> {
    const query = plainToClass(NonAvailabilityFindManyArgs, request.query);
    const results = await this.service.findNonAvailabilities(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        endTime: true,
        id: true,
        startTime: true,

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/nonAvailabilities")
  async connectNonAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: NonAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nonAvailabilities: {
        connect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/nonAvailabilities")
  async updateNonAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: NonAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nonAvailabilities: {
        set: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/nonAvailabilities")
  async disconnectNonAvailabilities(
    @common.Param() params: TutorWhereUniqueInput,
    @common.Body() body: NonAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      nonAvailabilities: {
        disconnect: body,
      },
    };
    await this.service.updateTutor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
