/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NonAvailability as PrismaNonAvailability,
  Tutor as PrismaTutor,
} from "@prisma/client";

export class NonAvailabilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NonAvailabilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nonAvailability.count(args);
  }

  async nonAvailabilities<T extends Prisma.NonAvailabilityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonAvailabilityFindManyArgs>
  ): Promise<PrismaNonAvailability[]> {
    return this.prisma.nonAvailability.findMany<Prisma.NonAvailabilityFindManyArgs>(
      args
    );
  }
  async nonAvailability<T extends Prisma.NonAvailabilityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonAvailabilityFindUniqueArgs>
  ): Promise<PrismaNonAvailability | null> {
    return this.prisma.nonAvailability.findUnique(args);
  }
  async createNonAvailability<T extends Prisma.NonAvailabilityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonAvailabilityCreateArgs>
  ): Promise<PrismaNonAvailability> {
    return this.prisma.nonAvailability.create<T>(args);
  }
  async updateNonAvailability<T extends Prisma.NonAvailabilityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonAvailabilityUpdateArgs>
  ): Promise<PrismaNonAvailability> {
    return this.prisma.nonAvailability.update<T>(args);
  }
  async deleteNonAvailability<T extends Prisma.NonAvailabilityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NonAvailabilityDeleteArgs>
  ): Promise<PrismaNonAvailability> {
    return this.prisma.nonAvailability.delete(args);
  }

  async getTutor(parentId: string): Promise<PrismaTutor | null> {
    return this.prisma.nonAvailability
      .findUnique({
        where: { id: parentId },
      })
      .tutor();
  }
}
