/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NonAvailabilityService } from "../nonAvailability.service";
import { NonAvailabilityCreateInput } from "./NonAvailabilityCreateInput";
import { NonAvailability } from "./NonAvailability";
import { NonAvailabilityFindManyArgs } from "./NonAvailabilityFindManyArgs";
import { NonAvailabilityWhereUniqueInput } from "./NonAvailabilityWhereUniqueInput";
import { NonAvailabilityUpdateInput } from "./NonAvailabilityUpdateInput";

export class NonAvailabilityControllerBase {
  constructor(protected readonly service: NonAvailabilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NonAvailability })
  async createNonAvailability(
    @common.Body() data: NonAvailabilityCreateInput
  ): Promise<NonAvailability> {
    return await this.service.createNonAvailability({
      data: {
        ...data,

        tutor: data.tutor
          ? {
              connect: data.tutor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        endTime: true,
        id: true,
        startTime: true,

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NonAvailability] })
  @ApiNestedQuery(NonAvailabilityFindManyArgs)
  async nonAvailabilities(
    @common.Req() request: Request
  ): Promise<NonAvailability[]> {
    const args = plainToClass(NonAvailabilityFindManyArgs, request.query);
    return this.service.nonAvailabilities({
      ...args,
      select: {
        createdAt: true,
        date: true,
        endTime: true,
        id: true,
        startTime: true,

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NonAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async nonAvailability(
    @common.Param() params: NonAvailabilityWhereUniqueInput
  ): Promise<NonAvailability | null> {
    const result = await this.service.nonAvailability({
      where: params,
      select: {
        createdAt: true,
        date: true,
        endTime: true,
        id: true,
        startTime: true,

        tutor: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NonAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNonAvailability(
    @common.Param() params: NonAvailabilityWhereUniqueInput,
    @common.Body() data: NonAvailabilityUpdateInput
  ): Promise<NonAvailability | null> {
    try {
      return await this.service.updateNonAvailability({
        where: params,
        data: {
          ...data,

          tutor: data.tutor
            ? {
                connect: data.tutor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          endTime: true,
          id: true,
          startTime: true,

          tutor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NonAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNonAvailability(
    @common.Param() params: NonAvailabilityWhereUniqueInput
  ): Promise<NonAvailability | null> {
    try {
      return await this.service.deleteNonAvailability({
        where: params,
        select: {
          createdAt: true,
          date: true,
          endTime: true,
          id: true,
          startTime: true,

          tutor: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
