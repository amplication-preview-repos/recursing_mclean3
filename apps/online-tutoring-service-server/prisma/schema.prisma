datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Student {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  lessons   Lesson[]
  updatedAt DateTime @updatedAt
}

model Tutor {
  availabilities    Availability[]
  createdAt         DateTime          @default(now())
  id                String            @id @default(cuid())
  lessons           Lesson[]
  nonAvailabilities NonAvailability[]
  updatedAt         DateTime          @updatedAt
}

model Course {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Chat {
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  messages  Message[]
  name      String?
  updatedAt DateTime  @updatedAt
}

model Message {
  chat      Chat?     @relation(fields: [chatId], references: [id])
  chatId    String?
  content   String?
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  timestamp DateTime?
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  createdAt DateTime  @default(now())
  email     String?   @unique
  firstName String?
  id        String    @id @default(cuid())
  lastName  String?
  messages  Message[]
  password  String
  roles     Json
  updatedAt DateTime  @updatedAt
  username  String    @unique
}

model Availability {
  createdAt DateTime                   @default(now())
  dayOfWeek EnumAvailabilityDayOfWeek?
  endTime   DateTime?
  id        String                     @id @default(cuid())
  startTime DateTime?
  tutor     Tutor?                     @relation(fields: [tutorId], references: [id])
  tutorId   String?
  updatedAt DateTime                   @updatedAt
}

model Lesson {
  createdAt DateTime  @default(now())
  date      DateTime?
  id        String    @id @default(cuid())
  student   Student?  @relation(fields: [studentId], references: [id])
  studentId String?
  tutor     Tutor?    @relation(fields: [tutorId], references: [id])
  tutorId   String?
  updatedAt DateTime  @updatedAt
}

model NonAvailability {
  createdAt DateTime  @default(now())
  date      DateTime?
  endTime   DateTime?
  id        String    @id @default(cuid())
  startTime DateTime?
  tutor     Tutor?    @relation(fields: [tutorId], references: [id])
  tutorId   String?
  updatedAt DateTime  @updatedAt
}

enum EnumAvailabilityDayOfWeek {
  Option1
}
